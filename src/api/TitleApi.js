/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: it@vilabs.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Title from '../model/Title';

/**
* Title service.
* @module api/TitleApi
* @version 1.0.0
*/
export default class TitleApi {

    /**
    * Constructs a new TitleApi. 
    * @alias module:api/TitleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createtitle operation.
     * @callback module:api/TitleApi~createtitleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Title} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Title} title data to be created
     * @param {module:api/TitleApi~createtitleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Title}
     */
    createtitle(title, callback) {
      let postBody = title;
      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling createtitle");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Title;
      return this.apiClient.callApi(
        '/title', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletetitle operation.
     * @callback module:api/TitleApi~deletetitleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} titleId the Id parameter
     * @param {module:api/TitleApi~deletetitleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletetitle(titleId, callback) {
      let postBody = null;
      // verify the required parameter 'titleId' is set
      if (titleId === undefined || titleId === null) {
        throw new Error("Missing the required parameter 'titleId' when calling deletetitle");
      }

      let pathParams = {
        'titleId': titleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/title/{titleId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlltitle operation.
     * @callback module:api/TitleApi~getAlltitleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Title>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/TitleApi~getAlltitleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Title>}
     */
    getAlltitle(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Title];
      return this.apiClient.callApi(
        '/title/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByParamstitle operation.
     * @callback module:api/TitleApi~getByParamstitleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Title>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data based on user query
     * @param {String} filter the query based on which the search is performed
     * @param {module:api/TitleApi~getByParamstitleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Title>}
     */
    getByParamstitle(filter, callback) {
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getByParamstitle");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Title];
      return this.apiClient.callApi(
        '/title/getByParams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gettitle operation.
     * @callback module:api/TitleApi~gettitleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Title} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} titleId the Id parameter
     * @param {module:api/TitleApi~gettitleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Title}
     */
    gettitle(titleId, callback) {
      let postBody = null;
      // verify the required parameter 'titleId' is set
      if (titleId === undefined || titleId === null) {
        throw new Error("Missing the required parameter 'titleId' when calling gettitle");
      }

      let pathParams = {
        'titleId': titleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Title;
      return this.apiClient.callApi(
        '/title/{titleId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatetitle operation.
     * @callback module:api/TitleApi~updatetitleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Title} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} titleId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Title} opts.title data to be updated
     * @param {module:api/TitleApi~updatetitleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Title}
     */
    updatetitle(titleId, opts, callback) {
      opts = opts || {};
      let postBody = opts['title'];
      // verify the required parameter 'titleId' is set
      if (titleId === undefined || titleId === null) {
        throw new Error("Missing the required parameter 'titleId' when calling updatetitle");
      }

      let pathParams = {
        'titleId': titleId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Title;
      return this.apiClient.callApi(
        '/title/{titleId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
